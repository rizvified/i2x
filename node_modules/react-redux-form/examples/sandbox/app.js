import React, { Component } from 'react'
import ReactDOM from 'react-dom'

import { createStore, applyMiddleware, combineReducers, compose } from 'redux'
import { Provider, connect } from 'react-redux'
// import { Form, Control, Errors, combineForms, actions } from 'react-redux-form'
import thunk from 'redux-thunk';
import createLogger from 'redux-logger';

import {
  Field,
  Errors,
  Control,
  Form,
  combineForms,
  actions,
  formReducer,
  modeled
} from 'react-redux-form';
const classNames = () => {};

const initialState = {
  authentication: null
};

function loginReducer(state = initialState, action) {
  switch (action.type) {
    case "LOGIN_PENDING":
      return Object.assign({}, state);
    case "LOGIN_SUCCESSFUL":
      return Object.assign({}, action.payload);
    case "LOGOUT_SUCCESSFUL":
      return Object.assign({}, action.payload);
    default:
      return Object.assign({}, state);
  }
}

const store = createStore(combineReducers({
  authentication: modeled(loginReducer, 'authentication'),
  authenticationForm: formReducer('authentication', {})
}), compose(applyMiddleware(thunk), (window.devToolsExtension ? window.devToolsExtension() : f => f )));

const TextFieldPresenter = (props) => {
  const { label, passedProps, required, messages, size, className, disabled, placeholder, unit } = props;
  const { model, fieldValue } = passedProps;
  const classes = classNames({
      className: true,
      'form-control': true,
  });
  const wrapperClasses = classNames({
    "has-danger" : (fieldValue.touched && !fieldValue.valid),
    "form-group" : true
  });

  return (
    <div className={wrapperClasses}>
      {label && <label>{label}</label>}
        {unit && <span className="input-unit">{unit}</span>}
<input {...passedProps} className={classes} required={required} disabled={disabled} placeholder={placeholder} />

      <div class="form-control-feedback"><Errors model={model} messages={messages}/></div>
    </div>
  );
};

class AuthForm extends Component {
  render() {
    return (
      <Form className="large-inputs" model="authentication" onSubmit={this.props.doLogin}>
        <Control component={TextFieldPresenter}
             mapProps={{passedProps: (props) => props }}
             controlProps={this.props}
             model="authentication.token" />
        <button type="submit" color="info" size="lg">Dive In</button>
      </Form>
    )
  }
}

class App extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <ConnectedAuthForm />
      </Provider>
    );
  }
}

function mapStateToProps(store, ownProps) {
  return {
  };
}

function mapDispatchToProps(dispatch) {
  return {
    doLogin: (authentication) => {
      console.log(authentication);
      dispatch(actions.setPending("authentication.token", true));
      dispatch(actions.setValidity("authentication.token", { valid: false }, {async: true}));
      dispatch(actions.setPending("authentication.token", false));
    }
  };
}

const ConnectedAuthForm = connect(mapStateToProps, mapDispatchToProps)(AuthForm);

ReactDOM.render(<App />, document.getElementById('app'));
